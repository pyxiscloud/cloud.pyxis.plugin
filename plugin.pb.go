// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: plugin/plugin.proto

package cloud_pyxis_plugin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flip int32

const (
	Flip_Flip_90  Flip = 0
	Flip_Flip_180 Flip = 1
	Flip_Flip_270 Flip = 2
	Flip_Flip_360 Flip = 3
)

// Enum value maps for Flip.
var (
	Flip_name = map[int32]string{
		0: "Flip_90",
		1: "Flip_180",
		2: "Flip_270",
		3: "Flip_360",
	}
	Flip_value = map[string]int32{
		"Flip_90":  0,
		"Flip_180": 1,
		"Flip_270": 2,
		"Flip_360": 3,
	}
)

func (x Flip) Enum() *Flip {
	p := new(Flip)
	*p = x
	return p
}

func (x Flip) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flip) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_plugin_proto_enumTypes[0].Descriptor()
}

func (Flip) Type() protoreflect.EnumType {
	return &file_plugin_plugin_proto_enumTypes[0]
}

func (x Flip) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flip.Descriptor instead.
func (Flip) EnumDescriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{0}
}

type Type int32

const (
	Type_LightbulbRelay      Type = 0
	Type_LightbulbDimmer     Type = 1
	Type_LightbulbRGB        Type = 2
	Type_Switch              Type = 3
	Type_Outlet              Type = 4
	Type_Control             Type = 5
	Type_TemperatureSensor   Type = 6
	Type_WindowCovering      Type = 7
	Type_ContactSensor       Type = 8
	Type_LeakSensor          Type = 9
	Type_SmokeSensor         Type = 10
	Type_LightSensor         Type = 11
	Type_HumiditySensor      Type = 12
	Type_MotionSensor        Type = 13
	Type_Thermostat          Type = 14
	Type_FloorHeating        Type = 15
	Type_MusicPlayer         Type = 16
	Type_IRemitter           Type = 17
	Type_AV_control          Type = 18
	Type_GarageDoorOpener    Type = 19
	Type_LockMechanism       Type = 20
	Type_PressureSensor      Type = 21
	Type_AirQuality          Type = 22
	Type_AirPurifier         Type = 23
	Type_Humidifier          Type = 24
	Type_CarbonDioxideSensor Type = 25
	Type_BridgedControl      Type = 26
	Type_Fan                 Type = 27
	Type_Faucets             Type = 28
	Type_Sprinklers          Type = 29
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "LightbulbRelay",
		1:  "LightbulbDimmer",
		2:  "LightbulbRGB",
		3:  "Switch",
		4:  "Outlet",
		5:  "Control",
		6:  "TemperatureSensor",
		7:  "WindowCovering",
		8:  "ContactSensor",
		9:  "LeakSensor",
		10: "SmokeSensor",
		11: "LightSensor",
		12: "HumiditySensor",
		13: "MotionSensor",
		14: "Thermostat",
		15: "FloorHeating",
		16: "MusicPlayer",
		17: "IRemitter",
		18: "AV_control",
		19: "GarageDoorOpener",
		20: "LockMechanism",
		21: "PressureSensor",
		22: "AirQuality",
		23: "AirPurifier",
		24: "Humidifier",
		25: "CarbonDioxideSensor",
		26: "BridgedControl",
		27: "Fan",
		28: "Faucets",
		29: "Sprinklers",
	}
	Type_value = map[string]int32{
		"LightbulbRelay":      0,
		"LightbulbDimmer":     1,
		"LightbulbRGB":        2,
		"Switch":              3,
		"Outlet":              4,
		"Control":             5,
		"TemperatureSensor":   6,
		"WindowCovering":      7,
		"ContactSensor":       8,
		"LeakSensor":          9,
		"SmokeSensor":         10,
		"LightSensor":         11,
		"HumiditySensor":      12,
		"MotionSensor":        13,
		"Thermostat":          14,
		"FloorHeating":        15,
		"MusicPlayer":         16,
		"IRemitter":           17,
		"AV_control":          18,
		"GarageDoorOpener":    19,
		"LockMechanism":       20,
		"PressureSensor":      21,
		"AirQuality":          22,
		"AirPurifier":         23,
		"Humidifier":          24,
		"CarbonDioxideSensor": 25,
		"BridgedControl":      26,
		"Fan":                 27,
		"Faucets":             28,
		"Sprinklers":          29,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_plugin_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_plugin_plugin_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{1}
}

type PluginMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtype *SubtypeOneOf  `protobuf:"bytes,1,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Address *PluginAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PluginMessage) Reset() {
	*x = PluginMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMessage) ProtoMessage() {}

func (x *PluginMessage) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginMessage.ProtoReflect.Descriptor instead.
func (*PluginMessage) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *PluginMessage) GetSubtype() *SubtypeOneOf {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *PluginMessage) GetAddress() *PluginAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AbleUploadDevices bool               `protobuf:"varint,2,opt,name=ableUploadDevices,proto3" json:"ableUploadDevices,omitempty"`
	StringValues      map[string]string  `protobuf:"bytes,3,rep,name=stringValues,proto3" json:"stringValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumberValues      map[string]int32   `protobuf:"bytes,4,rep,name=numberValues,proto3" json:"numberValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FloatValues       map[string]float32 `protobuf:"bytes,5,rep,name=floatValues,proto3" json:"floatValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *Plugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plugin) GetAbleUploadDevices() bool {
	if x != nil {
		return x.AbleUploadDevices
	}
	return false
}

func (x *Plugin) GetStringValues() map[string]string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *Plugin) GetNumberValues() map[string]int32 {
	if x != nil {
		return x.NumberValues
	}
	return nil
}

func (x *Plugin) GetFloatValues() map[string]float32 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

type SubtypeOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subtype:
	//	*SubtypeOneOf_Value
	//	*SubtypeOneOf_On
	//	*SubtypeOneOf_Dimmer
	//	*SubtypeOneOf_Hsl
	//	*SubtypeOneOf_Hue
	//	*SubtypeOneOf_Saturation
	//	*SubtypeOneOf_Rgb
	//	*SubtypeOneOf_Red
	//	*SubtypeOneOf_Green
	//	*SubtypeOneOf_Blue
	//	*SubtypeOneOf_State
	//	*SubtypeOneOf_Temperature
	//	*SubtypeOneOf_CurrentTemp
	//	*SubtypeOneOf_HeatCoolState
	//	*SubtypeOneOf_TargetTemp
	//	*SubtypeOneOf_Batterylevel
	//	*SubtypeOneOf_Batterylow
	//	*SubtypeOneOf_Rotate
	//	*SubtypeOneOf_Anytext
	//	*SubtypeOneOf_PlayStop
	//	*SubtypeOneOf_Volume
	//	*SubtypeOneOf_Operation
	//	*SubtypeOneOf_FanMode
	//	*SubtypeOneOf_Thermostat
	//	*SubtypeOneOf_Flip
	//	*SubtypeOneOf_AirqualityPm
	//	*SubtypeOneOf_CurrentState
	//	*SubtypeOneOf_TargetState
	//	*SubtypeOneOf_LockControls
	//	*SubtypeOneOf_LimitValue
	//	*SubtypeOneOf_ChargingState
	//	*SubtypeOneOf_LinkQuality
	//	*SubtypeOneOf_ColorTemp
	//	*SubtypeOneOf_LastStatus
	//	*SubtypeOneOf_GetListBaseTopics
	//	*SubtypeOneOf_SetListBaseTopics
	//	*SubtypeOneOf_ActListBaseTopics
	//	*SubtypeOneOf_WhiteValue
	//	*SubtypeOneOf_YellowValue
	//	*SubtypeOneOf_LastStatusSubtype
	//	*SubtypeOneOf_CurrentHeatCoolState
	Subtype isSubtypeOneOf_Subtype `protobuf_oneof:"subtype"`
}

func (x *SubtypeOneOf) Reset() {
	*x = SubtypeOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtypeOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtypeOneOf) ProtoMessage() {}

func (x *SubtypeOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtypeOneOf.ProtoReflect.Descriptor instead.
func (*SubtypeOneOf) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{2}
}

func (m *SubtypeOneOf) GetSubtype() isSubtypeOneOf_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *SubtypeOneOf) GetValue() float32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Value); ok {
		return x.Value
	}
	return 0
}

func (x *SubtypeOneOf) GetOn() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_On); ok {
		return x.On
	}
	return false
}

func (x *SubtypeOneOf) GetDimmer() *DIMMER {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Dimmer); ok {
		return x.Dimmer
	}
	return nil
}

func (x *SubtypeOneOf) GetHsl() *HSL {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Hsl); ok {
		return x.Hsl
	}
	return nil
}

func (x *SubtypeOneOf) GetHue() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Hue); ok {
		return x.Hue
	}
	return 0
}

func (x *SubtypeOneOf) GetSaturation() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Saturation); ok {
		return x.Saturation
	}
	return 0
}

func (x *SubtypeOneOf) GetRgb() *RGB {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Rgb); ok {
		return x.Rgb
	}
	return nil
}

func (x *SubtypeOneOf) GetRed() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Red); ok {
		return x.Red
	}
	return 0
}

func (x *SubtypeOneOf) GetGreen() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Green); ok {
		return x.Green
	}
	return 0
}

func (x *SubtypeOneOf) GetBlue() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Blue); ok {
		return x.Blue
	}
	return 0
}

func (x *SubtypeOneOf) GetState() string {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_State); ok {
		return x.State
	}
	return ""
}

func (x *SubtypeOneOf) GetTemperature() float64 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Temperature); ok {
		return x.Temperature
	}
	return 0
}

func (x *SubtypeOneOf) GetCurrentTemp() float64 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_CurrentTemp); ok {
		return x.CurrentTemp
	}
	return 0
}

func (x *SubtypeOneOf) GetHeatCoolState() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_HeatCoolState); ok {
		return x.HeatCoolState
	}
	return 0
}

func (x *SubtypeOneOf) GetTargetTemp() float64 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_TargetTemp); ok {
		return x.TargetTemp
	}
	return 0
}

func (x *SubtypeOneOf) GetBatterylevel() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Batterylevel); ok {
		return x.Batterylevel
	}
	return 0
}

func (x *SubtypeOneOf) GetBatterylow() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Batterylow); ok {
		return x.Batterylow
	}
	return false
}

func (x *SubtypeOneOf) GetRotate() float32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Rotate); ok {
		return x.Rotate
	}
	return 0
}

func (x *SubtypeOneOf) GetAnytext() string {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Anytext); ok {
		return x.Anytext
	}
	return ""
}

func (x *SubtypeOneOf) GetPlayStop() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_PlayStop); ok {
		return x.PlayStop
	}
	return 0
}

func (x *SubtypeOneOf) GetVolume() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Volume); ok {
		return x.Volume
	}
	return 0
}

func (x *SubtypeOneOf) GetOperation() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Operation); ok {
		return x.Operation
	}
	return 0
}

func (x *SubtypeOneOf) GetFanMode() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_FanMode); ok {
		return x.FanMode
	}
	return 0
}

func (x *SubtypeOneOf) GetThermostat() *THERMOSTAT {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Thermostat); ok {
		return x.Thermostat
	}
	return nil
}

func (x *SubtypeOneOf) GetFlip() Flip {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_Flip); ok {
		return x.Flip
	}
	return Flip_Flip_90
}

func (x *SubtypeOneOf) GetAirqualityPm() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_AirqualityPm); ok {
		return x.AirqualityPm
	}
	return 0
}

func (x *SubtypeOneOf) GetCurrentState() float32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_CurrentState); ok {
		return x.CurrentState
	}
	return 0
}

func (x *SubtypeOneOf) GetTargetState() float32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_TargetState); ok {
		return x.TargetState
	}
	return 0
}

func (x *SubtypeOneOf) GetLockControls() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_LockControls); ok {
		return x.LockControls
	}
	return false
}

func (x *SubtypeOneOf) GetLimitValue() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_LimitValue); ok {
		return x.LimitValue
	}
	return 0
}

func (x *SubtypeOneOf) GetChargingState() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_ChargingState); ok {
		return x.ChargingState
	}
	return 0
}

func (x *SubtypeOneOf) GetLinkQuality() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_LinkQuality); ok {
		return x.LinkQuality
	}
	return 0
}

func (x *SubtypeOneOf) GetColorTemp() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_ColorTemp); ok {
		return x.ColorTemp
	}
	return 0
}

func (x *SubtypeOneOf) GetLastStatus() *SubtypeOneOf {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_LastStatus); ok {
		return x.LastStatus
	}
	return nil
}

func (x *SubtypeOneOf) GetGetListBaseTopics() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_GetListBaseTopics); ok {
		return x.GetListBaseTopics
	}
	return false
}

func (x *SubtypeOneOf) GetSetListBaseTopics() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_SetListBaseTopics); ok {
		return x.SetListBaseTopics
	}
	return false
}

func (x *SubtypeOneOf) GetActListBaseTopics() bool {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_ActListBaseTopics); ok {
		return x.ActListBaseTopics
	}
	return false
}

func (x *SubtypeOneOf) GetWhiteValue() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_WhiteValue); ok {
		return x.WhiteValue
	}
	return 0
}

func (x *SubtypeOneOf) GetYellowValue() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_YellowValue); ok {
		return x.YellowValue
	}
	return 0
}

func (x *SubtypeOneOf) GetLastStatusSubtype() *Subtype {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_LastStatusSubtype); ok {
		return x.LastStatusSubtype
	}
	return nil
}

func (x *SubtypeOneOf) GetCurrentHeatCoolState() uint32 {
	if x, ok := x.GetSubtype().(*SubtypeOneOf_CurrentHeatCoolState); ok {
		return x.CurrentHeatCoolState
	}
	return 0
}

type isSubtypeOneOf_Subtype interface {
	isSubtypeOneOf_Subtype()
}

type SubtypeOneOf_Value struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3,oneof"`
}

type SubtypeOneOf_On struct {
	On bool `protobuf:"varint,2,opt,name=on,proto3,oneof"`
}

type SubtypeOneOf_Dimmer struct {
	Dimmer *DIMMER `protobuf:"bytes,3,opt,name=dimmer,proto3,oneof"`
}

type SubtypeOneOf_Hsl struct {
	Hsl *HSL `protobuf:"bytes,4,opt,name=hsl,proto3,oneof"`
}

type SubtypeOneOf_Hue struct {
	Hue uint32 `protobuf:"varint,5,opt,name=hue,proto3,oneof"`
}

type SubtypeOneOf_Saturation struct {
	Saturation uint32 `protobuf:"varint,6,opt,name=saturation,proto3,oneof"`
}

type SubtypeOneOf_Rgb struct {
	Rgb *RGB `protobuf:"bytes,7,opt,name=rgb,proto3,oneof"`
}

type SubtypeOneOf_Red struct {
	Red uint32 `protobuf:"varint,8,opt,name=red,proto3,oneof"`
}

type SubtypeOneOf_Green struct {
	Green uint32 `protobuf:"varint,9,opt,name=green,proto3,oneof"`
}

type SubtypeOneOf_Blue struct {
	Blue uint32 `protobuf:"varint,10,opt,name=blue,proto3,oneof"`
}

type SubtypeOneOf_State struct {
	State string `protobuf:"bytes,11,opt,name=state,proto3,oneof"`
}

type SubtypeOneOf_Temperature struct {
	Temperature float64 `protobuf:"fixed64,12,opt,name=temperature,proto3,oneof"`
}

type SubtypeOneOf_CurrentTemp struct {
	CurrentTemp float64 `protobuf:"fixed64,13,opt,name=currentTemp,proto3,oneof"`
}

type SubtypeOneOf_HeatCoolState struct {
	HeatCoolState uint32 `protobuf:"varint,14,opt,name=heatCoolState,proto3,oneof"`
}

type SubtypeOneOf_TargetTemp struct {
	TargetTemp float64 `protobuf:"fixed64,15,opt,name=targetTemp,proto3,oneof"`
}

type SubtypeOneOf_Batterylevel struct {
	Batterylevel uint32 `protobuf:"varint,16,opt,name=batterylevel,proto3,oneof"`
}

type SubtypeOneOf_Batterylow struct {
	Batterylow bool `protobuf:"varint,17,opt,name=batterylow,proto3,oneof"`
}

type SubtypeOneOf_Rotate struct {
	Rotate float32 `protobuf:"fixed32,18,opt,name=rotate,proto3,oneof"`
}

type SubtypeOneOf_Anytext struct {
	Anytext string `protobuf:"bytes,19,opt,name=anytext,proto3,oneof"`
}

type SubtypeOneOf_PlayStop struct {
	PlayStop uint32 `protobuf:"varint,20,opt,name=playStop,proto3,oneof"`
}

type SubtypeOneOf_Volume struct {
	Volume uint32 `protobuf:"varint,21,opt,name=volume,proto3,oneof"`
}

type SubtypeOneOf_Operation struct {
	Operation uint32 `protobuf:"varint,22,opt,name=operation,proto3,oneof"`
}

type SubtypeOneOf_FanMode struct {
	FanMode uint32 `protobuf:"varint,23,opt,name=fanMode,proto3,oneof"`
}

type SubtypeOneOf_Thermostat struct {
	Thermostat *THERMOSTAT `protobuf:"bytes,24,opt,name=thermostat,proto3,oneof"`
}

type SubtypeOneOf_Flip struct {
	Flip Flip `protobuf:"varint,25,opt,name=flip,proto3,enum=plugin.Flip,oneof"`
}

type SubtypeOneOf_AirqualityPm struct {
	AirqualityPm uint32 `protobuf:"varint,26,opt,name=airqualityPm,proto3,oneof"`
}

type SubtypeOneOf_CurrentState struct {
	CurrentState float32 `protobuf:"fixed32,27,opt,name=currentState,proto3,oneof"`
}

type SubtypeOneOf_TargetState struct {
	TargetState float32 `protobuf:"fixed32,28,opt,name=targetState,proto3,oneof"`
}

type SubtypeOneOf_LockControls struct {
	LockControls bool `protobuf:"varint,29,opt,name=lockControls,proto3,oneof"`
}

type SubtypeOneOf_LimitValue struct {
	LimitValue uint32 `protobuf:"varint,30,opt,name=limitValue,proto3,oneof"`
}

type SubtypeOneOf_ChargingState struct {
	ChargingState uint32 `protobuf:"varint,31,opt,name=chargingState,proto3,oneof"`
}

type SubtypeOneOf_LinkQuality struct {
	LinkQuality uint32 `protobuf:"varint,32,opt,name=linkQuality,proto3,oneof"`
}

type SubtypeOneOf_ColorTemp struct {
	ColorTemp uint32 `protobuf:"varint,33,opt,name=colorTemp,proto3,oneof"` //140 - 500
}

type SubtypeOneOf_LastStatus struct {
	LastStatus *SubtypeOneOf `protobuf:"bytes,34,opt,name=lastStatus,proto3,oneof"`
}

type SubtypeOneOf_GetListBaseTopics struct {
	GetListBaseTopics bool `protobuf:"varint,35,opt,name=getListBaseTopics,proto3,oneof"`
}

type SubtypeOneOf_SetListBaseTopics struct {
	SetListBaseTopics bool `protobuf:"varint,36,opt,name=setListBaseTopics,proto3,oneof"`
}

type SubtypeOneOf_ActListBaseTopics struct {
	ActListBaseTopics bool `protobuf:"varint,37,opt,name=actListBaseTopics,proto3,oneof"`
}

type SubtypeOneOf_WhiteValue struct {
	WhiteValue uint32 `protobuf:"varint,38,opt,name=whiteValue,proto3,oneof"`
}

type SubtypeOneOf_YellowValue struct {
	YellowValue uint32 `protobuf:"varint,39,opt,name=yellowValue,proto3,oneof"`
}

type SubtypeOneOf_LastStatusSubtype struct {
	LastStatusSubtype *Subtype `protobuf:"bytes,40,opt,name=lastStatusSubtype,proto3,oneof"`
}

type SubtypeOneOf_CurrentHeatCoolState struct {
	//    double targetTempHeat = 41;
	//    double targetTempCool = 42;
	//    double targetTempAuto = 43;
	//    double targetTempDry = 44;
	//    double targetTempFan = 45;
	CurrentHeatCoolState uint32 `protobuf:"varint,46,opt,name=currentHeatCoolState,proto3,oneof"`
}

func (*SubtypeOneOf_Value) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_On) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Dimmer) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Hsl) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Hue) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Saturation) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Rgb) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Red) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Green) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Blue) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_State) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Temperature) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_CurrentTemp) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_HeatCoolState) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_TargetTemp) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Batterylevel) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Batterylow) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Rotate) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Anytext) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_PlayStop) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Volume) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Operation) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_FanMode) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Thermostat) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_Flip) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_AirqualityPm) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_CurrentState) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_TargetState) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_LockControls) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_LimitValue) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_ChargingState) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_LinkQuality) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_ColorTemp) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_LastStatus) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_GetListBaseTopics) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_SetListBaseTopics) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_ActListBaseTopics) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_WhiteValue) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_YellowValue) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_LastStatusSubtype) isSubtypeOneOf_Subtype() {}

func (*SubtypeOneOf_CurrentHeatCoolState) isSubtypeOneOf_Subtype() {}

type Subtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value             float32       `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	On                bool          `protobuf:"varint,2,opt,name=on,proto3" json:"on,omitempty"`
	Dimmer            *DIMMER       `protobuf:"bytes,3,opt,name=dimmer,proto3" json:"dimmer,omitempty"`
	Hsl               *HSL          `protobuf:"bytes,4,opt,name=hsl,proto3" json:"hsl,omitempty"`
	Hue               uint32        `protobuf:"varint,5,opt,name=hue,proto3" json:"hue,omitempty"`
	Saturation        uint32        `protobuf:"varint,6,opt,name=saturation,proto3" json:"saturation,omitempty"`
	Rgb               *RGB          `protobuf:"bytes,7,opt,name=rgb,proto3" json:"rgb,omitempty"`
	Red               uint32        `protobuf:"varint,8,opt,name=red,proto3" json:"red,omitempty"`
	Green             uint32        `protobuf:"varint,9,opt,name=green,proto3" json:"green,omitempty"`
	Blue              uint32        `protobuf:"varint,10,opt,name=blue,proto3" json:"blue,omitempty"`
	State             string        `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Temperature       float64       `protobuf:"fixed64,12,opt,name=temperature,proto3" json:"temperature,omitempty"`
	CurrentTemp       float64       `protobuf:"fixed64,13,opt,name=currentTemp,proto3" json:"currentTemp,omitempty"`
	HeatCoolState     uint32        `protobuf:"varint,14,opt,name=heatCoolState,proto3" json:"heatCoolState,omitempty"`
	TargetTemp        float64       `protobuf:"fixed64,15,opt,name=targetTemp,proto3" json:"targetTemp,omitempty"`
	Batterylevel      uint32        `protobuf:"varint,16,opt,name=batterylevel,proto3" json:"batterylevel,omitempty"`
	Batterylow        bool          `protobuf:"varint,17,opt,name=batterylow,proto3" json:"batterylow,omitempty"`
	Rotate            float32       `protobuf:"fixed32,18,opt,name=rotate,proto3" json:"rotate,omitempty"`
	Anytext           string        `protobuf:"bytes,19,opt,name=anytext,proto3" json:"anytext,omitempty"`
	PlayStop          uint32        `protobuf:"varint,20,opt,name=playStop,proto3" json:"playStop,omitempty"`
	Volume            uint32        `protobuf:"varint,21,opt,name=volume,proto3" json:"volume,omitempty"`
	Operation         uint32        `protobuf:"varint,22,opt,name=operation,proto3" json:"operation,omitempty"`
	FanMode           uint32        `protobuf:"varint,23,opt,name=fanMode,proto3" json:"fanMode,omitempty"`
	Thermostat        *THERMOSTAT   `protobuf:"bytes,24,opt,name=thermostat,proto3" json:"thermostat,omitempty"`
	Flip              Flip          `protobuf:"varint,25,opt,name=flip,proto3,enum=plugin.Flip" json:"flip,omitempty"`
	AirqualityPm      uint32        `protobuf:"varint,26,opt,name=airqualityPm,proto3" json:"airqualityPm,omitempty"`
	CurrentState      float32       `protobuf:"fixed32,27,opt,name=currentState,proto3" json:"currentState,omitempty"`
	TargetState       float32       `protobuf:"fixed32,28,opt,name=targetState,proto3" json:"targetState,omitempty"`
	LockControls      bool          `protobuf:"varint,29,opt,name=lockControls,proto3" json:"lockControls,omitempty"`
	LimitValue        uint32        `protobuf:"varint,30,opt,name=limitValue,proto3" json:"limitValue,omitempty"`
	ChargingState     uint32        `protobuf:"varint,31,opt,name=chargingState,proto3" json:"chargingState,omitempty"`
	LinkQuality       uint32        `protobuf:"varint,32,opt,name=linkQuality,proto3" json:"linkQuality,omitempty"`
	ColorTemp         uint32        `protobuf:"varint,33,opt,name=colorTemp,proto3" json:"colorTemp,omitempty"`
	LastStatus        *SubtypeOneOf `protobuf:"bytes,34,opt,name=lastStatus,proto3" json:"lastStatus,omitempty"`
	GetListBaseTopics bool          `protobuf:"varint,35,opt,name=getListBaseTopics,proto3" json:"getListBaseTopics,omitempty"`
	SetListBaseTopics bool          `protobuf:"varint,36,opt,name=setListBaseTopics,proto3" json:"setListBaseTopics,omitempty"`
	ActListBaseTopics bool          `protobuf:"varint,37,opt,name=actListBaseTopics,proto3" json:"actListBaseTopics,omitempty"`
	WhiteValue        uint32        `protobuf:"varint,38,opt,name=whiteValue,proto3" json:"whiteValue,omitempty"`
	YellowValue       uint32        `protobuf:"varint,39,opt,name=yellowValue,proto3" json:"yellowValue,omitempty"`
	LastStatusSubtype *Subtype      `protobuf:"bytes,40,opt,name=lastStatusSubtype,proto3" json:"lastStatusSubtype,omitempty"`
	//  double targetTempHeat = 41;
	//  double targetTempCool = 42;
	//  double targetTempAuto = 43;
	//  double targetTempDry = 44;
	//  double targetTempFan = 45;
	CurrentHeatCoolState uint32 `protobuf:"varint,46,opt,name=currentHeatCoolState,proto3" json:"currentHeatCoolState,omitempty"`
}

func (x *Subtype) Reset() {
	*x = Subtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtype) ProtoMessage() {}

func (x *Subtype) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtype.ProtoReflect.Descriptor instead.
func (*Subtype) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *Subtype) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Subtype) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *Subtype) GetDimmer() *DIMMER {
	if x != nil {
		return x.Dimmer
	}
	return nil
}

func (x *Subtype) GetHsl() *HSL {
	if x != nil {
		return x.Hsl
	}
	return nil
}

func (x *Subtype) GetHue() uint32 {
	if x != nil {
		return x.Hue
	}
	return 0
}

func (x *Subtype) GetSaturation() uint32 {
	if x != nil {
		return x.Saturation
	}
	return 0
}

func (x *Subtype) GetRgb() *RGB {
	if x != nil {
		return x.Rgb
	}
	return nil
}

func (x *Subtype) GetRed() uint32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Subtype) GetGreen() uint32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Subtype) GetBlue() uint32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Subtype) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Subtype) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Subtype) GetCurrentTemp() float64 {
	if x != nil {
		return x.CurrentTemp
	}
	return 0
}

func (x *Subtype) GetHeatCoolState() uint32 {
	if x != nil {
		return x.HeatCoolState
	}
	return 0
}

func (x *Subtype) GetTargetTemp() float64 {
	if x != nil {
		return x.TargetTemp
	}
	return 0
}

func (x *Subtype) GetBatterylevel() uint32 {
	if x != nil {
		return x.Batterylevel
	}
	return 0
}

func (x *Subtype) GetBatterylow() bool {
	if x != nil {
		return x.Batterylow
	}
	return false
}

func (x *Subtype) GetRotate() float32 {
	if x != nil {
		return x.Rotate
	}
	return 0
}

func (x *Subtype) GetAnytext() string {
	if x != nil {
		return x.Anytext
	}
	return ""
}

func (x *Subtype) GetPlayStop() uint32 {
	if x != nil {
		return x.PlayStop
	}
	return 0
}

func (x *Subtype) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Subtype) GetOperation() uint32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *Subtype) GetFanMode() uint32 {
	if x != nil {
		return x.FanMode
	}
	return 0
}

func (x *Subtype) GetThermostat() *THERMOSTAT {
	if x != nil {
		return x.Thermostat
	}
	return nil
}

func (x *Subtype) GetFlip() Flip {
	if x != nil {
		return x.Flip
	}
	return Flip_Flip_90
}

func (x *Subtype) GetAirqualityPm() uint32 {
	if x != nil {
		return x.AirqualityPm
	}
	return 0
}

func (x *Subtype) GetCurrentState() float32 {
	if x != nil {
		return x.CurrentState
	}
	return 0
}

func (x *Subtype) GetTargetState() float32 {
	if x != nil {
		return x.TargetState
	}
	return 0
}

func (x *Subtype) GetLockControls() bool {
	if x != nil {
		return x.LockControls
	}
	return false
}

func (x *Subtype) GetLimitValue() uint32 {
	if x != nil {
		return x.LimitValue
	}
	return 0
}

func (x *Subtype) GetChargingState() uint32 {
	if x != nil {
		return x.ChargingState
	}
	return 0
}

func (x *Subtype) GetLinkQuality() uint32 {
	if x != nil {
		return x.LinkQuality
	}
	return 0
}

func (x *Subtype) GetColorTemp() uint32 {
	if x != nil {
		return x.ColorTemp
	}
	return 0
}

func (x *Subtype) GetLastStatus() *SubtypeOneOf {
	if x != nil {
		return x.LastStatus
	}
	return nil
}

func (x *Subtype) GetGetListBaseTopics() bool {
	if x != nil {
		return x.GetListBaseTopics
	}
	return false
}

func (x *Subtype) GetSetListBaseTopics() bool {
	if x != nil {
		return x.SetListBaseTopics
	}
	return false
}

func (x *Subtype) GetActListBaseTopics() bool {
	if x != nil {
		return x.ActListBaseTopics
	}
	return false
}

func (x *Subtype) GetWhiteValue() uint32 {
	if x != nil {
		return x.WhiteValue
	}
	return 0
}

func (x *Subtype) GetYellowValue() uint32 {
	if x != nil {
		return x.YellowValue
	}
	return 0
}

func (x *Subtype) GetLastStatusSubtype() *Subtype {
	if x != nil {
		return x.LastStatusSubtype
	}
	return nil
}

func (x *Subtype) GetCurrentHeatCoolState() uint32 {
	if x != nil {
		return x.CurrentHeatCoolState
	}
	return 0
}

type DIMMER struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	On          bool   `protobuf:"varint,2,opt,name=on,proto3" json:"on,omitempty"`
	ColorTemp   uint32 `protobuf:"varint,3,opt,name=colorTemp,proto3" json:"colorTemp,omitempty"`
	WhiteValue  uint32 `protobuf:"varint,4,opt,name=whiteValue,proto3" json:"whiteValue,omitempty"`
	YellowValue uint32 `protobuf:"varint,5,opt,name=yellowValue,proto3" json:"yellowValue,omitempty"`
	//  uint32 lastBrightnes = 4;
	SubtypeList []string `protobuf:"bytes,6,rep,name=subtypeList,proto3" json:"subtypeList,omitempty"`
}

func (x *DIMMER) Reset() {
	*x = DIMMER{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIMMER) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIMMER) ProtoMessage() {}

func (x *DIMMER) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIMMER.ProtoReflect.Descriptor instead.
func (*DIMMER) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *DIMMER) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DIMMER) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *DIMMER) GetColorTemp() uint32 {
	if x != nil {
		return x.ColorTemp
	}
	return 0
}

func (x *DIMMER) GetWhiteValue() uint32 {
	if x != nil {
		return x.WhiteValue
	}
	return 0
}

func (x *DIMMER) GetYellowValue() uint32 {
	if x != nil {
		return x.YellowValue
	}
	return 0
}

func (x *DIMMER) GetSubtypeList() []string {
	if x != nil {
		return x.SubtypeList
	}
	return nil
}

type THERMOSTAT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTemp   float64  `protobuf:"fixed64,1,opt,name=currentTemp,proto3" json:"currentTemp,omitempty"`
	HeatCoolState uint32   `protobuf:"varint,2,opt,name=heatCoolState,proto3" json:"heatCoolState,omitempty"`
	TargetTemp    float64  `protobuf:"fixed64,3,opt,name=targetTemp,proto3" json:"targetTemp,omitempty"`
	FanMode       uint32   `protobuf:"varint,4,opt,name=fanMode,proto3" json:"fanMode,omitempty"`
	SubtypeList   []string `protobuf:"bytes,5,rep,name=subtypeList,proto3" json:"subtypeList,omitempty"`
	//  double targetTempHeat = 6;
	//  double targetTempCool = 7;
	//  double targetTempAuto = 8;
	//  double targetTempDry = 9;
	//  double targetTempFan = 10;
	On                   bool    `protobuf:"varint,11,opt,name=on,proto3" json:"on,omitempty"`
	Rotate               float32 `protobuf:"fixed32,12,opt,name=rotate,proto3" json:"rotate,omitempty"`
	CurrentHeatCoolState uint32  `protobuf:"varint,13,opt,name=currentHeatCoolState,proto3" json:"currentHeatCoolState,omitempty"`
}

func (x *THERMOSTAT) Reset() {
	*x = THERMOSTAT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *THERMOSTAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*THERMOSTAT) ProtoMessage() {}

func (x *THERMOSTAT) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use THERMOSTAT.ProtoReflect.Descriptor instead.
func (*THERMOSTAT) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *THERMOSTAT) GetCurrentTemp() float64 {
	if x != nil {
		return x.CurrentTemp
	}
	return 0
}

func (x *THERMOSTAT) GetHeatCoolState() uint32 {
	if x != nil {
		return x.HeatCoolState
	}
	return 0
}

func (x *THERMOSTAT) GetTargetTemp() float64 {
	if x != nil {
		return x.TargetTemp
	}
	return 0
}

func (x *THERMOSTAT) GetFanMode() uint32 {
	if x != nil {
		return x.FanMode
	}
	return 0
}

func (x *THERMOSTAT) GetSubtypeList() []string {
	if x != nil {
		return x.SubtypeList
	}
	return nil
}

func (x *THERMOSTAT) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *THERMOSTAT) GetRotate() float32 {
	if x != nil {
		return x.Rotate
	}
	return 0
}

func (x *THERMOSTAT) GetCurrentHeatCoolState() uint32 {
	if x != nil {
		return x.CurrentHeatCoolState
	}
	return 0
}

type HSL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hue        uint32 `protobuf:"varint,1,opt,name=hue,proto3" json:"hue,omitempty"`
	Saturation uint32 `protobuf:"varint,2,opt,name=saturation,proto3" json:"saturation,omitempty"`
	Lightness  uint32 `protobuf:"varint,3,opt,name=lightness,proto3" json:"lightness,omitempty"`
	ColorTemp  uint32 `protobuf:"varint,4,opt,name=colorTemp,proto3" json:"colorTemp,omitempty"`
	//  uint32 lastBrightnes = 5;
	On          bool     `protobuf:"varint,6,opt,name=on,proto3" json:"on,omitempty"`
	SubtypeList []string `protobuf:"bytes,7,rep,name=subtypeList,proto3" json:"subtypeList,omitempty"`
}

func (x *HSL) Reset() {
	*x = HSL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HSL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSL) ProtoMessage() {}

func (x *HSL) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSL.ProtoReflect.Descriptor instead.
func (*HSL) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *HSL) GetHue() uint32 {
	if x != nil {
		return x.Hue
	}
	return 0
}

func (x *HSL) GetSaturation() uint32 {
	if x != nil {
		return x.Saturation
	}
	return 0
}

func (x *HSL) GetLightness() uint32 {
	if x != nil {
		return x.Lightness
	}
	return 0
}

func (x *HSL) GetColorTemp() uint32 {
	if x != nil {
		return x.ColorTemp
	}
	return 0
}

func (x *HSL) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *HSL) GetSubtypeList() []string {
	if x != nil {
		return x.SubtypeList
	}
	return nil
}

type RGB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red         uint32   `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	Green       uint32   `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue        uint32   `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
	Alpha       uint32   `protobuf:"varint,4,opt,name=alpha,proto3" json:"alpha,omitempty"`
	On          bool     `protobuf:"varint,5,opt,name=on,proto3" json:"on,omitempty"`
	SubtypeList []string `protobuf:"bytes,6,rep,name=subtypeList,proto3" json:"subtypeList,omitempty"`
}

func (x *RGB) Reset() {
	*x = RGB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGB) ProtoMessage() {}

func (x *RGB) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGB.ProtoReflect.Descriptor instead.
func (*RGB) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *RGB) GetRed() uint32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *RGB) GetGreen() uint32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *RGB) GetBlue() uint32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *RGB) GetAlpha() uint32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *RGB) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *RGB) GetSubtypeList() []string {
	if x != nil {
		return x.SubtypeList
	}
	return nil
}

type PluginAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//  map<string, string> mapTypeMap = 2;
	StringValues map[string]string  `protobuf:"bytes,3,rep,name=stringValues,proto3" json:"stringValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumberValues map[string]int32   `protobuf:"bytes,4,rep,name=numberValues,proto3" json:"numberValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FloatValues  map[string]float32 `protobuf:"bytes,5,rep,name=floatValues,proto3" json:"floatValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Type         Type               `protobuf:"varint,6,opt,name=type,proto3,enum=plugin.Type" json:"type,omitempty"`
}

func (x *PluginAddress) Reset() {
	*x = PluginAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginAddress) ProtoMessage() {}

func (x *PluginAddress) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginAddress.ProtoReflect.Descriptor instead.
func (*PluginAddress) Descriptor() ([]byte, []int) {
	return file_plugin_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *PluginAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginAddress) GetStringValues() map[string]string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *PluginAddress) GetNumberValues() map[string]int32 {
	if x != nil {
		return x.NumberValues
	}
	return nil
}

func (x *PluginAddress) GetFloatValues() map[string]float32 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *PluginAddress) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_LightbulbRelay
}

var File_plugin_plugin_proto protoreflect.FileDescriptor

var file_plugin_plugin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x7a, 0x0a,
	0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a,
	0x08, 0x08, 0x03, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xe5, 0x03, 0x0a, 0x06, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x08, 0x08, 0x06, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x22, 0xd0, 0x0b, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06,
	0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x49, 0x4d, 0x4d, 0x45, 0x52, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x03, 0x68, 0x73, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x48, 0x53, 0x4c,
	0x48, 0x00, 0x52, 0x03, 0x68, 0x73, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x68, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x68, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x03, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x47, 0x42, 0x48, 0x00, 0x52, 0x03, 0x72, 0x67, 0x62, 0x12, 0x12,
	0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x26, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x6f, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c,
	0x6f, 0x77, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x61, 0x6e, 0x79, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x6e, 0x79, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x4f,
	0x53, 0x54, 0x41, 0x54, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6c, 0x69, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x69, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x66, 0x6c, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x69, 0x72, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6d, 0x12, 0x24, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x11, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x08, 0x08, 0x2f, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0xee, 0x0a, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x44, 0x49, 0x4d, 0x4d, 0x45, 0x52, 0x52, 0x06, 0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x03, 0x68, 0x73, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x48, 0x53, 0x4c, 0x52, 0x03, 0x68, 0x73, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x68, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x68, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x03, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x47, 0x42, 0x52, 0x03, 0x72, 0x67, 0x62, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x79, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x79, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x4f,
	0x53, 0x54, 0x41, 0x54, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x66, 0x6c, 0x69, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x66, 0x6c,
	0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x69, 0x72, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x08, 0x08, 0x2f, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xba, 0x01, 0x0a, 0x06, 0x44, 0x49, 0x4d, 0x4d, 0x45, 0x52,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x08, 0x08, 0x07, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x22, 0x96, 0x02, 0x0a, 0x0a, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x4f, 0x53, 0x54, 0x41,
	0x54, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x74,
	0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4a, 0x08, 0x08, 0x0e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xaf, 0x01, 0x0a, 0x03,
	0x48, 0x53, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x68, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x08, 0x08, 0x08, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x93, 0x01,
	0x0a, 0x03, 0x52, 0x47, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x08, 0x08, 0x07, 0x10, 0x80, 0x80,
	0x80, 0x80, 0x02, 0x22, 0xf5, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x08, 0x08, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x2a, 0x44, 0x0a, 0x04, 0x46,
	0x6c, 0x69, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6c, 0x69, 0x70, 0x5f, 0x39, 0x30, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x70, 0x5f, 0x31, 0x38, 0x30, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x6c, 0x69, 0x70, 0x5f, 0x32, 0x37, 0x30, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x6c, 0x69, 0x70, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x03, 0x22, 0x05, 0x08, 0x04, 0x10, 0xe8,
	0x02, 0x2a, 0x99, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x75, 0x6c, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x75, 0x6c, 0x62, 0x44, 0x69, 0x6d, 0x6d, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x75, 0x6c, 0x62,
	0x52, 0x47, 0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x6b,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6d, 0x6f, 0x6b,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x75,
	0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0c, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x10, 0x0e,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x56, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x15, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x16, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x50, 0x75, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x17,
	0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x18,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x44, 0x69, 0x6f, 0x78, 0x69, 0x64,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x1a, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x61, 0x6e, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74,
	0x73, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x6b, 0x6c, 0x65, 0x72,
	0x73, 0x10, 0x1d, 0x22, 0x08, 0x08, 0x1f, 0x10, 0xff, 0xff, 0xff, 0xff, 0x07, 0x42, 0x2a, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x78, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x79, 0x78,
	0x69, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_plugin_plugin_proto_rawDescOnce sync.Once
	file_plugin_plugin_proto_rawDescData = file_plugin_plugin_proto_rawDesc
)

func file_plugin_plugin_proto_rawDescGZIP() []byte {
	file_plugin_plugin_proto_rawDescOnce.Do(func() {
		file_plugin_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_plugin_proto_rawDescData)
	})
	return file_plugin_plugin_proto_rawDescData
}

var file_plugin_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_plugin_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_plugin_plugin_proto_goTypes = []interface{}{
	(Flip)(0),             // 0: plugin.Flip
	(Type)(0),             // 1: plugin.Type
	(*PluginMessage)(nil), // 2: plugin.PluginMessage
	(*Plugin)(nil),        // 3: plugin.Plugin
	(*SubtypeOneOf)(nil),  // 4: plugin.SubtypeOneOf
	(*Subtype)(nil),       // 5: plugin.Subtype
	(*DIMMER)(nil),        // 6: plugin.DIMMER
	(*THERMOSTAT)(nil),    // 7: plugin.THERMOSTAT
	(*HSL)(nil),           // 8: plugin.HSL
	(*RGB)(nil),           // 9: plugin.RGB
	(*PluginAddress)(nil), // 10: plugin.PluginAddress
	nil,                   // 11: plugin.Plugin.StringValuesEntry
	nil,                   // 12: plugin.Plugin.NumberValuesEntry
	nil,                   // 13: plugin.Plugin.FloatValuesEntry
	nil,                   // 14: plugin.PluginAddress.StringValuesEntry
	nil,                   // 15: plugin.PluginAddress.NumberValuesEntry
	nil,                   // 16: plugin.PluginAddress.FloatValuesEntry
}
var file_plugin_plugin_proto_depIdxs = []int32{
	4,  // 0: plugin.PluginMessage.subtype:type_name -> plugin.SubtypeOneOf
	10, // 1: plugin.PluginMessage.address:type_name -> plugin.PluginAddress
	11, // 2: plugin.Plugin.stringValues:type_name -> plugin.Plugin.StringValuesEntry
	12, // 3: plugin.Plugin.numberValues:type_name -> plugin.Plugin.NumberValuesEntry
	13, // 4: plugin.Plugin.floatValues:type_name -> plugin.Plugin.FloatValuesEntry
	6,  // 5: plugin.SubtypeOneOf.dimmer:type_name -> plugin.DIMMER
	8,  // 6: plugin.SubtypeOneOf.hsl:type_name -> plugin.HSL
	9,  // 7: plugin.SubtypeOneOf.rgb:type_name -> plugin.RGB
	7,  // 8: plugin.SubtypeOneOf.thermostat:type_name -> plugin.THERMOSTAT
	0,  // 9: plugin.SubtypeOneOf.flip:type_name -> plugin.Flip
	4,  // 10: plugin.SubtypeOneOf.lastStatus:type_name -> plugin.SubtypeOneOf
	5,  // 11: plugin.SubtypeOneOf.lastStatusSubtype:type_name -> plugin.Subtype
	6,  // 12: plugin.Subtype.dimmer:type_name -> plugin.DIMMER
	8,  // 13: plugin.Subtype.hsl:type_name -> plugin.HSL
	9,  // 14: plugin.Subtype.rgb:type_name -> plugin.RGB
	7,  // 15: plugin.Subtype.thermostat:type_name -> plugin.THERMOSTAT
	0,  // 16: plugin.Subtype.flip:type_name -> plugin.Flip
	4,  // 17: plugin.Subtype.lastStatus:type_name -> plugin.SubtypeOneOf
	5,  // 18: plugin.Subtype.lastStatusSubtype:type_name -> plugin.Subtype
	14, // 19: plugin.PluginAddress.stringValues:type_name -> plugin.PluginAddress.StringValuesEntry
	15, // 20: plugin.PluginAddress.numberValues:type_name -> plugin.PluginAddress.NumberValuesEntry
	16, // 21: plugin.PluginAddress.floatValues:type_name -> plugin.PluginAddress.FloatValuesEntry
	1,  // 22: plugin.PluginAddress.type:type_name -> plugin.Type
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_plugin_plugin_proto_init() }
func file_plugin_plugin_proto_init() {
	if File_plugin_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtypeOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIMMER); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*THERMOSTAT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HSL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugin_plugin_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SubtypeOneOf_Value)(nil),
		(*SubtypeOneOf_On)(nil),
		(*SubtypeOneOf_Dimmer)(nil),
		(*SubtypeOneOf_Hsl)(nil),
		(*SubtypeOneOf_Hue)(nil),
		(*SubtypeOneOf_Saturation)(nil),
		(*SubtypeOneOf_Rgb)(nil),
		(*SubtypeOneOf_Red)(nil),
		(*SubtypeOneOf_Green)(nil),
		(*SubtypeOneOf_Blue)(nil),
		(*SubtypeOneOf_State)(nil),
		(*SubtypeOneOf_Temperature)(nil),
		(*SubtypeOneOf_CurrentTemp)(nil),
		(*SubtypeOneOf_HeatCoolState)(nil),
		(*SubtypeOneOf_TargetTemp)(nil),
		(*SubtypeOneOf_Batterylevel)(nil),
		(*SubtypeOneOf_Batterylow)(nil),
		(*SubtypeOneOf_Rotate)(nil),
		(*SubtypeOneOf_Anytext)(nil),
		(*SubtypeOneOf_PlayStop)(nil),
		(*SubtypeOneOf_Volume)(nil),
		(*SubtypeOneOf_Operation)(nil),
		(*SubtypeOneOf_FanMode)(nil),
		(*SubtypeOneOf_Thermostat)(nil),
		(*SubtypeOneOf_Flip)(nil),
		(*SubtypeOneOf_AirqualityPm)(nil),
		(*SubtypeOneOf_CurrentState)(nil),
		(*SubtypeOneOf_TargetState)(nil),
		(*SubtypeOneOf_LockControls)(nil),
		(*SubtypeOneOf_LimitValue)(nil),
		(*SubtypeOneOf_ChargingState)(nil),
		(*SubtypeOneOf_LinkQuality)(nil),
		(*SubtypeOneOf_ColorTemp)(nil),
		(*SubtypeOneOf_LastStatus)(nil),
		(*SubtypeOneOf_GetListBaseTopics)(nil),
		(*SubtypeOneOf_SetListBaseTopics)(nil),
		(*SubtypeOneOf_ActListBaseTopics)(nil),
		(*SubtypeOneOf_WhiteValue)(nil),
		(*SubtypeOneOf_YellowValue)(nil),
		(*SubtypeOneOf_LastStatusSubtype)(nil),
		(*SubtypeOneOf_CurrentHeatCoolState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_plugin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugin_plugin_proto_goTypes,
		DependencyIndexes: file_plugin_plugin_proto_depIdxs,
		EnumInfos:         file_plugin_plugin_proto_enumTypes,
		MessageInfos:      file_plugin_plugin_proto_msgTypes,
	}.Build()
	File_plugin_plugin_proto = out.File
	file_plugin_plugin_proto_rawDesc = nil
	file_plugin_plugin_proto_goTypes = nil
	file_plugin_plugin_proto_depIdxs = nil
}
